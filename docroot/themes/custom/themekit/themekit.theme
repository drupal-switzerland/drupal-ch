<?php

/**
 * @file
 * Use this file to override Drupal's default HTML output.
 *
 * 1. Preprocess hooks,
 * 2. Theme suggestions.
 * 3. Utility functions.
 * 4. Layout Builder Improvements.
 */

use Drupal\block\Entity\Block;
use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Render\Element;
use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Serialization\Yaml;
use Drupal\layout_builder\SectionComponent;
use Drupal\node\NodeInterface;

// *********************************************
// 1. Preprocess hooks
// *********************************************

/**
 * Implements template_preprocess_html().
 *
 * @param array $variables
 *   Default preprocess variables.
 */
function themekit_preprocess_html(array &$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node instanceof NodeInterface) {
    if ($node->hasField('layout_builder__layout') && !$node->get('layout_builder__layout')->isEmpty()) {
      $layouts = $node->get('layout_builder__layout')->getValue();
      $layout = array_shift($layouts);

      /** @var \Drupal\layout_builder\Section $section */
      $section = $layout['section'];

      if ($section->getLayoutId() === 'dnl_layout_banner_section') {
        $components = $section->getComponents();

        if (empty($components)) {
          return;
        }

        $component = array_shift($components);
        $blockId = $component->getPluginId();
        if ($component instanceof SectionComponent && $blockId === 'inline_block:home_banner') {
          $variables['attributes']['class'][] = 'is-home-banner';
          $component_config = $component->get('configuration');
          if (isset($component_config['block_revision_id'])) {
            $revision_id = $component_config['block_revision_id'];
            $block = \Drupal::entityTypeManager()->getStorage('block_content')->loadRevision($revision_id);
            if (is_null($block)) {
              return;
            }
            $logo_type = $block->get('field_logo_type')->value;
            $variables['attributes']['class'][] = 'logo-type--' . $logo_type;
          }
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_node().
 *
 * @param array $variables
 *   Default preprocess variables.
 */
function themekit_preprocess_node(array &$variables) {
  // Set our own node type preprocess, drupal creates them by default, but seems
  // to only run hook_preprocess_node__event on event full pages, not event
  // teasers as well.
  if (!empty($variables['node']) && is_object($variables['node']) && method_exists($variables['node'], 'getType')) {
    // Ensure that the node variable exists and is an object.
    $function = __FUNCTION__ . '_' . $variables['node']->getType();
    if (function_exists($function)) {
      $function($variables);
    }
  }
}

/**
 * Implements template_preprocess_layout().
 *
 * Add layout context to components so this can be used to make logic decisions.
 */
function themekit_preprocess_layout(&$variables) {
  foreach (Element::children($variables['content']) as $key) {
    $sections = $variables['content'][$key];
    foreach ($sections as $index => $section) {
      if (isset($variables['content'][$key][$index]['#base_plugin_id']) && $variables['content'][$key][$index]['#base_plugin_id'] === 'inline_block') {
        $variables['content'][$key][$index]['content']['#layout'] = $variables['theme_hook_original'];
        $variables['content'][$key][$index]['content']['#region'] = $key;
      }
    }
  }
}

/**
 * Implements template_preprocess_block().
 *
 * @param array $variables
 *   Default preprocess variables.
 */
function themekit_preprocess_block(&$variables) {
  static $number = 1;
  $variables['counter'] = $number;

  if (!empty($variables['elements']['#id'])) {
    $variables['content']['#attributes']['block'] = $variables['elements']['#id'];

    $block_entity = Block::load($variables['elements']['#id']);
    $variables['block_region'] = $block_entity->getRegion();
  }

  // Set our own content blocks type preprocess and grab
  // block bundle for theming purposes.
  if (!empty($variables['elements']['content']['#block_content'])) {
    /** @var \Drupal\block\Entity\Block $block */
    $block = $variables['elements']['content']['#block_content'];
    $function = __FUNCTION__ . '_' . $variables['elements']['content']['#block_content']->bundle();

    if (function_exists($function)) {
      $function($variables);
    }

    // Block Type.
    $bundle = $block->bundle();
    $variables['block_type'] = $bundle;
  }
  $number++;
}

/**
 * Implements template_preprocess_paragraph().
 *
 * @param array $variables
 *   Default preprocess variables.
 */
function themekit_preprocess_paragraph(array &$variables) {
  // Set our own paragraphs type preprocess, drupal creates them by default,
  // but they seem to only run hook_preprocess_paragraph__simple_content on
  // default view mode, not additional view modes as well.
  if (!empty($variables['paragraph']) && is_object($variables['paragraph']) && method_exists($variables['paragraph'], 'getType')) {
    // Ensure that the node variable exists and is an object.
    $function = __FUNCTION__ . '_' . $variables['paragraph']->getType();
    if (function_exists($function)) {
      $function($variables);
    }
  }
}

/**
 * Link.
 *
 * @param array $variables
 *   Default preprocess variables.
 */
function themekit_preprocess_paragraph_link_file(array &$variables) {
  /** @var Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  // If alt link text has content, set to description to that value and
  // create a new cache tag.
  if (!$paragraph->field_alt_link_text->isEmpty()) {
    $file = $paragraph->field_file->entity->field_file->entity;

    if ($file) {
      $variables['alternate_file'] = [
        '#theme' => 'file_link',
        '#file' => $file,
        '#description' => $paragraph->field_alt_link_text->value,
      ];
    }
  }
}

/**
 * Paragraphs preprocess media image.
 *
 * @param array $variables
 *   Default preprocess variables.
 */
function themekit_preprocess_paragraph_media_image(array &$variables) {
  /** @var Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  if (!empty($paragraph->field_image->entity)) {
    $uri = $paragraph->field_image->entity->field_media_image->entity->getFileUri();
    $alt = $paragraph->field_image->entity->field_media_image->first()->get('alt')->getString();
    $responsive_image_style = '';
    $image = Drupal::service('image.factory')->get($uri);
    $image_width = '';
    $image_height = '';
    if ($image->isValid()) {
      $image_width = $image->getWidth();
      $image_height = $image->getHeight();
    }

    // Do contextual adjustments to responsive image (image style or background
    // Identify the implementing bundle and use any additional conditions.
    $parent = $paragraph->getParentEntity();
    // @todo examples to demonstrate implementing responsive image style and
    // background image overrides on media_image, remove if not using.
    // if ($parent->getEntityTypeId() === 'paragraph') {
    // switch ($parent->getType()) {
    // case 'compound_media_bar':
    // $responsive_image_style = 'full_width';
    // break;
    // }
    // }
    // Only set custom image style for items that have set the
    // responsive image style.
    if ($responsive_image_style) {
      $variables['custom_image_style'] = [
        '#theme' => 'responsive_image',
        '#responsive_image_style_id' => $responsive_image_style,
        '#uri' => $uri,
        '#attributes' => [
          'alt' => $alt,
          'width' => $image_width,
          'height' => $image_height,
        ],
      ];
    }
  }
}



/**
 * Implements hook_preprocess_HOOK().
 */
function themekit_preprocess_pager(&$variables) {
  /** @var \Drupal\Core\Pager\PagerManagerInterface $pager_manager */
  $pager_manager = \Drupal::service('pager.manager');

  $element = $variables['pager']['#element'];
  $pager = $pager_manager->getPager($element);
  if (!$pager) {
    return;
  }

  // Total page items.
  if ($pager->getTotalPages() > 1) {
    $variables['items']['total'] = $pager->getTotalPages();
  }

 // Unset: first, last and ellipsis items
  unset($variables['items']['first']);
  unset($variables['items']['last']);
  unset($variables['ellipses']);
}

// *********************************************
// 2. Theme suggestions
// *********************************************
/**
 * Implements hook_library_info_alter().
 */
function themekit_library_info_alter(&$libraries, $extension) {
  // Get the path of the theme where this function is being called.
  $theme_name = basename(__FILE__, '.theme');
  // Get the path of the theme where this function is being called.
  $theme_path = \Drupal::service('extension.list.theme')->getPath($theme_name);
  // Alter only the library definitions of the current theme.
  if ($extension == $theme_name) {

    $partial_libraries = [];

    $partials_file = $theme_path . '/partials.yml';
    if (file_exists($partials_file)) {
      try {
        $partial_libraries = Yaml::decode(file_get_contents($partials_file)) ?? [];
      }
      catch (InvalidDataTypeException $e) {
        // Rethrow a more helpful exception to provide context.
        throw new InvalidLibraryFileException(sprintf('Invalid library definition in %s: %s', $partials_file, $e->getMessage()), 0, $e);
      }
    }

    $libraries = NestedArray::mergeDeep($libraries, $partial_libraries);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function themekit_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $field_name = !empty($variables['element']['#field_name']) ? $variables['element']['#field_name'] : '';
  $type = !empty($variables['element']['#entity_type']) ? $variables['element']['#entity_type'] : '';
  $bundle = !empty($variables['element']['#bundle']) ? $variables['element']['#bundle'] : '';
  $is_paragraph = ($type == 'paragraph');
  $is_block = ($type == 'block_content');

  // Apply theme suggestions based on field name.
  switch ($field_name) {
    case 'field_p_content':
    case 'field_p_header':
      // Remove all field markup so only the field value markup is output.
      array_unshift($suggestions, 'field__no_wrapper');
      break;

    case 'field_p_column':
      // Remove field item wrappers.
      array_unshift($suggestions, 'field__reset');
      break;
  }

  // Apply theme suggestions for "field_heading" based on paragraph bundle.
  if ($field_name == 'field_heading' && $is_paragraph) {
    switch ($bundle) {
      case 'banner_standard':
      case 'single_heading':
      case 'category_feature':
        array_unshift($suggestions, 'field__heading_3');
        break;
    }
  }

  if ($field_name == 'field_heading' && $is_block) {
    switch ($bundle) {
      case 'simple_banner':
      case 'basic_banner':
      case 'home_banner':
        array_unshift($suggestions, 'field__heading_1');
        break;
      case 'partners':
      case 'categories':
      case 'text':
      case 'text_with_media':
      case 'links':
      case 'cases_slider':
      case 'news_slider':
        array_unshift($suggestions, 'field__heading_2');
        break;
    }
  }

  switch ($type) {
    case 'contact_message':
      $suggestions[] = 'field__' . $type;
      $suggestions[] = 'field__' . $type . '__' . $variables['element']['#field_type'];
      break;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function themekit_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function themekit_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . $variables['element']['#form_id'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for taxonomies.
 *
 */
function themekit_theme_suggestions_taxonomy_term_alter(&$suggestions, $variables) {
  $suggestions[] = 'taxonomy_term__' . $variables['elements']['#taxonomy_term']->bundle() . '__' . $variables['elements']['#view_mode'];
}

// *********************************************
// 3. Utility functions
// *********************************************

/**
 * Get a renderable array from a block ID.
 *
 * @param string $block_id
 *   Block ID.
 * @param int $weight
 *   Optional weight parameter, useful if you are dumping this into a
 *   region and need to negotiate its position.
 *
 * @return array
 *   Renderable array of the block.
 */
function themekit_block_to_renderable_array($block_id, $weight = NULL) {
  $block = Block::load($block_id);
  if (is_null($block)) {
    return [];
  }
  $block_content = \Drupal::entityTypeManager()
    ->getViewBuilder('block')
    ->view($block);

  // Set weight.
  if (isset($weight)) {
    $block_content['#weight'] = $weight;
  }

  if ($block->access('view')) {
    return $block_content;
  }
  else {
    return [];
  }
}

/**
 * Implements hook_form_alter().
 */
function themekit_layouts_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'node_component_page_layout_builder_form') {
    /**
     * When using the moderation_sidebar module, let's avoid redundant clutter and remove moderation state
     * from the vanilla LB display.
     */
    if (isset($form['moderation_state'])) {
      $form['moderation_state']['#access'] = FALSE;
    }
    if (isset($form['revision_information'])) {
      $form['revision_information']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function themekit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] === 'views-exposed-form-cases-listing') {
    $form['title']['#prefix'] = '<div class="form-item__wrapper">';
    $form['title']['#suffix'] = t('<span class="toggle-filters">@title</span></div>', array('@title' => 'Categorie'));
  }
}

// *********************************************
// 4. Layout Builder Improvements
// This section in Staterkit and Adminkit match
// One for node edit pages and one for layout build modal.
// This is used to support dragula js for paragraphs.
// @todo can this moved to module?
// *********************************************

/**
 * Implements template_theme().
 *
 * Define the new template for the theme below.
 */
function themekit_theme($existing, $type, $theme, $path) {
  $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
  return [
    'field_multiple_value_form_divs' => [
      'template' => 'field-multiple-value-form-divs',
      'path' => $theme_path . '/partials/layout-builder-admin',
      'theme path' => $theme_path,
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_form_alter().
 */
function themekit_theme_suggestions_field_multiple_value_form_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#attached']['library'])) {
    // Classic.
    if ($is_paragraphs_widget = in_array('paragraphs/drupal.paragraphs.admin', $variables['element']['#attached']['library'])) {
      $suggestions[] = 'field_multiple_value_form_divs';
    }
    // Experimental.
    // @todo Need to look more into how the new experimental widget is working,
    // uncommenting the following seems to make it generally work with some
    // different styles, but will need to look into it.
    // if ($is_paragraphs_widget = in_array(
    // 'paragraphs/drupal.paragraphs.widget',
    // $variables['element']['#attached']['library']
    // )) {
    // $suggestions[] = 'field_multiple_value_form_divs';
    // }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function themekit_preprocess_field_multiple_value_form_divs(array &$variables) {
  $element = $variables['element'];
  $variables['multiple'] = $element['#cardinality_multiple'];

  if ($variables['multiple']) {
    $table_id = Html::getUniqueId($element['#field_name'] . '_values');
    $order_class = $element['#field_name'] . '-delta-order';
    $header_attributes = new Attribute(['class' => ['label']]);
    if (!empty($element['#required'])) {
      $header_attributes['class'][] = 'js-form-required';
      $header_attributes['class'][] = 'form-required';
    }
    $header = [
      [
        '#prefix' => '<h4' . $header_attributes . '>',
        'title' => [
          '#markup' => $element['#title'],
        ],
        '#suffix' => '</h4>',
      ],
    ];
    $rows = [];

    // Sort items according to '_weight' (needed when the form comes back after
    // preview or failed validation).
    $items = [];
    $variables['button'] = [];
    foreach (Element::children($element) as $key) {
      if ($key === 'add_more') {
        $variables['button'] = &$element[$key];
      }
      else {
        $items[] = &$element[$key];
      }
    }
    usort($items, '_field_multiple_value_form_sort_helper');

    // Add the items as table rows.
    foreach ($items as $item) {
      $item['_weight']['#attributes']['class'] = [$order_class];
      $item['_weight']['#attributes']['class'] = 'draggable';
    }

    $variables['paragraphs_field_header'] = $header;
    $variables['paragraphs_field_items'] = $items;

    $variables['table'] = [
      '#type' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#attributes' => [
        'id' => $table_id,
        'class' => ['field-multiple-table'],
      ],
      '#tabledrag' => [
        [
          'action' => 'order',
          'relationship' => 'sibling',
          'group' => $order_class,
        ],
      ],
    ];

    if (!empty($element['#description'])) {
      $description_id = $element['#attributes']['aria-describedby'];
      $description_attributes['id'] = $description_id;
      $variables['description']['attributes'] = new Attribute($description_attributes);
      $variables['description']['content'] = $element['#description'];

      // Add the description's id to the table aria attributes.
      $variables['table']['#attributes']['aria-describedby'] = $element['#attributes']['aria-describedby'];
    }
  }
  else {
    $variables['elements'] = [];
    foreach (Element::children($element) as $key) {
      $variables['elements'][] = $element[$key];
    }
  }
}
